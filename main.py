# pylint: disable=missing-function-docstring
# pylint: disable=unused-argument

import asyncio
import logging
import os
import sys
from os import getenv

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandObject, CommandStart
from aiogram.types import (Message, FSInputFile, InlineKeyboardMarkup,
                           InlineKeyboardButton, ReactionTypeEmoji)
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from bot import sched
from domain.action import generate_task_for_user, ImageMessage, check_answer_for_task
from storage import models
from storage.repo import UserRepository
from taskrepository.repo import TaskRepository

TOKEN = getenv("BOT_TOKEN")

dp = Dispatcher()
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
user_repo = UserRepository()
task_repo = TaskRepository()
scheduler = AsyncIOScheduler(timezone="Etc/GMT+5")
scheduler.add_job(
    sched.daily_generation,
    trigger="interval",
    seconds=60*60*24,
    kwargs={
        "bot": bot,
        "task_repo": task_repo,
        "user_repo": user_repo
    }
)


@dp.message(Command("gettopics"))
async def cmd_get_topics(message: Message, command: CommandObject):
    topics = user_repo.get_user_preferred_topics(message.from_user.id)
    topics_str = ";".join(map(lambda x: ":".join(x), topics))
    await message.answer(
        "<b>–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–º—ã:</b>\n"
        "<i>–§–æ—Ä–º–∞—Ç: </i>\n<code>–∫–æ–¥_–ø—Ä–µ–¥–º–µ—Ç–∞:‚Ññ_–∑–∞–¥–∞–Ω–∏—è;–∫–æ–¥_–ø—Ä–µ–¥–º–µ—Ç–∞2:‚Ññ_–∑–∞–¥–∞–Ω–∏—è2...</code>\n\n"
        f"<code>{topics_str}</code>"
    )


@dp.message(Command("settopics"))
async def cmd_set_topics(message: Message, command: CommandObject):
    if command.args is None:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã")
        return
    topics = [tuple(x.split(":", maxsplit=1)) for x in command.args.split(";")]
    user_repo.set_user_preferred_topics(message.from_user.id, topics)
    await message.answer(f"<b>–¢–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: </b><code>{command.args}</code>")


@dp.message(Command("gen"))
async def cmd_generate_task(message: Message, command: CommandObject):
    await message.react([ReactionTypeEmoji(emoji="üëç")])
    response = generate_task_for_user(
        message.from_user.id,
        user_repo, task_repo,
        as_image=True
    )

    if response is None:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—ã")

    if isinstance(response, ImageMessage):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ —Å–∞–π—Ç–µ", url=response.url),
        ]])
        await message.answer_photo(
            FSInputFile(response.image),
            caption=response.text,
            reply_markup=keyboard
        )
        os.remove(response.image)
    else:
        await message.answer(response.text)


@dp.message(Command("ans"))
async def cmd_answer(message: Message, command: CommandObject):
    if command.args is None:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã (2)")
        return
    args = command.args.split()
    if len(args) != 2:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã (2)")
        return
    ids, ans = args
    subject, task = ids.split(":")
    is_correct = check_answer_for_task(task_repo, subject, task, ans)
    if is_correct:
        await message.answer("<b>‚úÖ –í–µ—Ä–Ω–æ</b>")
    else:
        await message.answer("<b>‚ùå –ù–µ–≤–µ—Ä–Ω–æ</b>")


@dp.message(Command("sub"))
async def cmd_subscribe_unsubscribe(message: Message, command: CommandObject):
    current = user_repo.switch_receive_daily_task_for_user(message.from_user.id)
    if current:
        await message.answer("<b>‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è</b>")
    else:
        await message.answer("<b>‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>")


@dp.message(Command("help"))
async def cmd_help(message: Message, command: CommandObject):
    await message.answer(
        "<b>‚ùî –ü–æ–º–æ—â—å</b>\n\n"
        "<code>/help</code> - —ç—Ç–æ –º–µ–Ω—é\n\n"
        "<code>/gen</code> - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É\n\n"
        "<code>/settopics —Ç–µ–º—ã</code> - –∑–∞–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–º—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>–∫–æ–¥_–ø—Ä–µ–¥–º–µ—Ç–∞:–Ω–æ–º–µ—Ä_–∑–∞–¥–∞–Ω–∏—è</code>. "
        "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ - —Ä–∞–∑–¥–µ–ª–∏—Ç—å <code>;</code>. –ü—Ä–∏–º–µ—Ä: "
        "<code>inf:1;inf:2;rus:5</code>\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–¥—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤: \n" +
        ", \n".join(f"<code>{x.get_uid()}</code> - {x.get_name()}"
                  for x in task_repo.get_subjects()) +
        "\n\n"
        "<code>/gettopics</code> - –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–º—ã\n\n"
        "<code>/ans –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä_–∑–∞–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç</code> - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ."
        "–®–∞–±–ª–æ–Ω –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å –∫–∞–∂–¥—ã–º –∑–∞–¥–∞–Ω–∏–µ–º\n\n"
        "<code>/sub</code> - –≤–∫–ª./–≤—ã–∫–ª. –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –∑–∞–¥–∞–Ω–∏–π\n\n"
    )


@dp.message(CommandStart())
async def cmd_start(message: Message, command: CommandObject):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.\n"
        "<code>/help</code> –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥"
    )


async def main() -> None:
    scheduler.start()
    await dp.start_polling(bot)


if __name__ == "__main__":
    models.init()
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
